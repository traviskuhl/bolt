#!/usr/bin/php
<?php

$opts = getopt("tn", array("nostore"));

set_include_path(get_include_path().":/Applications/MAMP/bin/php/php5.3.6/lib/php/");
date_default_timezone_set("UTC");

// tar
require "Archive/Tar.php";
require 'AWSSDKforPHP/aws.phar';

use Aws\S3\S3Client;
use Aws\Common\Enum\Region;

$cfg = json_decode(file_get_contents($_SERVER['HOME']."/.boltbuild"), true);

if (!$cfg) {
    exit("Unable to load cfg from {$_SERVER['HOME']}/.boltbuild\n");
}

// phar
$phar = new Phar('bolt.phar', 0, 'bolt.phar');

// phar
$phar->setSignatureAlgorithm(Phar::SHA1);

// buffering
$phar->startBuffering();

// tet
if (isset($opts['t'])) {
    $sha = $version = 'test';
    $date = date("r");
    $ts = time();
}
else {
    list($sha, $date, $ts) = explode("|", trim(`git log --pretty="%h|%ci|%ct" -n1 `));
    $version = $sha;
}

// lets get our files
$dir = new RecursiveDirectoryIterator('../src/');
$it = new RecursiveIteratorIterator($dir);
$regex = new RegexIterator($it, '/^.+\.php$/i', RecursiveRegexIterator::GET_MATCH);

// add our files
foreach (iterator_to_array($regex) as $file) {

    // path - ../lib
    $path = str_replace("../src/", "", $file[0]);

    // drop some white space
    $content = stripWhitespace(file_get_contents($file[0]));

    // version
    $content = preg_replace("/const VERSION = '.*?';/", "const VERSION = '".$version."';", $content);

    // add it
    $phar->addFromString($path, $content);

}

// variables
$vars = array('sha' => $sha, 'date' => $date, 'cdate' => date('r', $ts));

// stub
$phar->setStub(stub('stub/pear.inc', $vars));

// DONE
$phar->stopBuffering();

// no phar
unset($phar);

// chmod
chmod("bolt.phar", 0755);

if (isset($opts['n'])) {
    rename("./bolt.phar", "../tests/bolt.phar");
    echo "Phar created and placed in test\n";
    exit;
}

// create a
$tar = new Archive_Tar("./bolt-latest.tar.gz", 'gz');

// create
$tar->create(array("./bolt.phar"));

$tar->addString("bin.inc", stub('stub/bin.inc', $vars));
$tar->addString("share.inc", stub('stub/share.inc', $vars));

// archive
if (!isset($opts['nostore'])) {

    // Instantiate the S3 client with your AWS credentials and desired AWS region
    $s3 = S3Client::factory(array(
        'key'    => $cfg['s3']['key'],
        'secret' => $cfg['s3']['secret'],
    ));

    $s3->putObject(array(
            "Bucket" => $cfg['s3']['bucket'],
            "Key" => $cfg['store']['phar']."/bolt-$version.phar",
            "Body" => file_get_contents("bolt.phar")
        ));

    $s3->putObject(array(
            "Bucket" => $cfg['s3']['bucket'],
            "Key" => $cfg['store']['pkg']."/bolt-$version.tar.gz",
            "Body" => file_get_contents("bolt-latest.tar.gz")
        ));

}

// keep our phar
rename("bolt.phar", "./latest/bolt.phar");
rename("bolt-latest.tar.gz", "./latest/bolt-latest.tar.gz");

// goodbye sucka
exit("DONE!\n\n");


function stub($file, $vars=array()) {

    // get our str
    $str = file_get_contents($file);

    // parse any variables
    foreach ($vars as $name => $value) {
        $str = str_replace("%".strtoupper($name)."%", $value, $str);
    }

    // give back
    return $str;

}


/*
 * This file is part of the Silex framework.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
 function stripWhitespace($source){
        if (!function_exists('token_get_all')) {
            return $source;
        }

        $output = '';
        foreach (token_get_all($source) as $token) {
            if (is_string($token)) {
                $output .= $token;
            } elseif (in_array($token[0], array(T_COMMENT, T_DOC_COMMENT))) {
                $output .= str_repeat("\n", substr_count($token[1], "\n"));
            } elseif (T_WHITESPACE === $token[0]) {
                // reduce wide spaces
                $whitespace = preg_replace('{[ \t]+}', ' ', $token[1]);
                // normalize newlines to \n
                $whitespace = preg_replace('{(?:\r\n|\r|\n)}', "\n", $whitespace);
                // trim leading spaces
                $whitespace = preg_replace('{\n +}', "\n", $whitespace);
                $output .= $whitespace;
            } else {
                $output .= $token[1];
            }
        }

        return $output;
    }